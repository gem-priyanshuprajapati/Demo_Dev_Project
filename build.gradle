buildscript {
    project.ext {
        serenityVersion = '2.3.12'
    }
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath('net.serenity-bdd:serenity-gradle-plugin:' + serenityVersion)
    }
}
plugins {
    id "nebula.release" version "17.2.2"
}
defaultTasks 'clean','test','aggregate'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: "nebula.release"

group 'org.customJar'                       //set according to your group name
version '1.0.13'

repositories {
    mavenCentral()
}

sourceCompatibility = 11                        //add according to your project SDK
targetCompatibility = 11                       //add according to your project SDK

ext {
    slf4jVersion = '2.0.1'
    serenityCoreVersion = '3.3.4'
    junitVersion = '4.13.2'
    assertJVersion = '3.23.1'
    logbackVersion = '1.2.3'
    restAssuredVersion = '5.2.0'
    jsonVersion = '20220320'
}

dependencies {

    testImplementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-rest-assured:${serenityCoreVersion}",
            "io.rest-assured:rest-assured:${restAssuredVersion}",
            "org.json:json:${jsonVersion}",
            "junit:junit:${junitVersion}",
            "org.assertj:assertj-core:${assertJVersion}",
            "org.slf4j:slf4j-simple:${slf4jVersion}",
            "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}"
    testImplementation group: 'com.google.code.javaparser', name: 'javaparser', version: '1.0.9'
    implementation group: 'com.gemecosystem.gemjar', name: 'gemjar-core', version: '1.1.8'
    testImplementation 'io.cucumber:cucumber-java:6.10.4'
    testImplementation 'io.cucumber:cucumber-junit:6.10.4'
}

jar {
    enabled = true
    zip64(true)
    configurations.testImplementation.setCanBeResolved(true)
    manifest {
        attributes 'Main-Class': "org.implementation.runner.testRunner",
                'Class-Path':configurations.testImplementation.collect{it.getName()}.join(' ')
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    from{
        configurations.runtimeClasspath.collect{
            it.isDirectory()? it : zipTree(it)
        }
    }
    from{
        configurations.runtimeClasspath.collect{
            it.isDirectory()? it : zipTree(it)
        }
    }
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    from sourceSets.main.output
    from sourceSets.test.output
    from ('src/test/resources'){
        include '**/*.feature'
    }
}
publishing {
    repositories {
        mavenLocal()
    }
    publications {
        maven(MavenPublication) {
            version = project.version
            from components.java
        }
    }
        println "Published version: " + version
}
test {
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
    systemProperty "cucumber.options", System.getProperty("cucumber.options")
    filter {
        includeTestsMatching "*.testRunner"                   //Set to your Cucumber Runner directory/Package
    }
    systemProperties System.getProperties()
}
gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
